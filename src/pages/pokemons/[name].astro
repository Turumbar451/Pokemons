---
import type { GetStaticPaths } from "astro";
import MainLayout from "../../layouts/MainLayout.astro";
import PokemonCard from "../../components/pokemons/pokemonCard.astro";
import type { PokemonListResponse } from "../../interfaces/pokemon-list.response";
import Title from "@components/shared/title.astro";
import { Icon } from "astro-icon/components";
//funcion para manejar ruta dinamica
// return un array de objetos con los parametros que se pueden usar en la ruta
export const getStaticPaths = (async () => {
  const resp = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
  const { results } = (await resp.json()) as PokemonListResponse;
  return results.map(({ name, url }) => ({
    params: { name },
    props: { name, url },
  }));
}) satisfies GetStaticPaths;

const { name } = Astro.params; //obtenemos el parametro de la url  /pokemons/:name
const { url } = Astro.props;
const id = url.split("/").at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imgSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout
  title={`Pokemon - # ${id} ${name}`}
  description={`informacion sobre el pokemon ${name}`}
  image={imgSrc}
>
  <section class="mt-10 mx-10 flex flex-col justify-center items-center">
    <div class="flex flex-row">
      <div class="flex flex-col">
        <!-- <a href="/">Home</a> -->
        <button onclick="history.back()" class="text-blue-500">Regresar</button>
        <Title>{name}</Title>
      </div>
      <button class="ml-4" id="btn-fav" data-name={name} data-id={id}>
        <Icon name="heart-outline" size={50} />
        <Icon class="hidden" name="heart-full" size={50} />
      </button>
    </div>

    <PokemonCard name={name} url={url} isBig />
    <audio controls class="mt-5">
      <source src={audioSrc} type="audio/ogg" />
      espero que esto salga bien
    </audio>
  </section>
</MainLayout>
<script>
  interface FavoritePokemon {
    id: number;
    name: string;
  }

  document.addEventListener("astro:page-load", () => {
    const btnFav = document.querySelector("#btn-fav") as HTMLButtonElement;
    if (!btnFav) return;
    const name = btnFav.dataset.name;
    const id = btnFav.dataset.id;

    btnFav.addEventListener("click", () => {
      console.log("", name, id);
    });
  });
</script>
<!-- 
<script define:vars={{name,id}} >
  document.addEventListener("astro:page-load", () => {
    const btnFav = document.querySelector("#btn-fav")
    if (!btnFav) return;
    clone = btnFav.cloneNode(true); //clonamos el nodo para que no se elimine el evento al cambiar de pagina
    btnFav.replaceWith(clone); //reemplazamos el nodo original por el clon
    clone.addEventListener("click", () => {
      console.log("", name, id);
    });
  });
</script> -->

<style>
  @reference "../../styles/global.css";
  a {
    @apply hover:underline text-blue-500;
  }
  #btn-fav {
    @apply hover:animate-pulse;
  }
</style>
