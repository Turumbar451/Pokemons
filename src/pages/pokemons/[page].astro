---
import type { GetStaticPaths } from "astro";
import PokemonCard from "../../components/pokemons/pokemonCard.astro";
import MainLayout from "../../layouts/MainLayout.astro";
const title = "Pokemon static | Home";
import type { PokemonListResponse } from "../../interfaces/pokemon-list.response.ts";

const resp = await fetch("https://pokeapi.co/api/v2/pokemon");
const data = (await resp.json()) as PokemonListResponse; // Type assertion, indica de que tipo es, una interface que defini en otro archivo

export const getStaticPaths = (async ({ paginate }) => {
  const resp = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
  const { results } = (await resp.json()) as PokemonListResponse;
  return paginate(results, { pageSize: 20 });
}) satisfies GetStaticPaths;

const { page } = Astro.props;
---

<MainLayout title={title}>
  <h1 class="text-3xl">Listado de Pokemons</h1>
  <hr />
  <section
    aria-label="Listado de pokemons"
    class="grid grid-cols-1 sm:grid-cols-4 md:grid-cols-5 gap-4 mt-5"
  >
    {page.data.map(({ name, url }) => <PokemonCard url={url} name={name} />)}
  </section>

  <section class="flex justify-center mt-10 gap-2">
{
  page.url.prev && ( //&& es un operador logico que se usa para verificar si existe la propiedad prev, si no existe no se ejecuta el siguiente bloque de codigo
    <a class="btn" href=`${page.url.prev}`>Anteriores</a>
  )
}

    <a class="btn" href=`${page.url.next}`>Siguiente</a>
    <div class="flex flex-1"></div>
    <span class="text-xl font-bold">{page.currentPage}</span>
  </section>
</MainLayout>

<style>
  @reference "tailwindcss";
  .disabled {
    @apply bg-gray-600 text-gray-400 cursor-not-allowed;
  }
  .btn {
    @apply bg-blue-500 p-2 text-white  rounded-md;
  }
</style>
